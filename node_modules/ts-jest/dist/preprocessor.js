"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs-extra");
var tsc = require("typescript");
var utils_1 = require("./utils");
var glob = require('glob-all');
var nodepath = require('path');
var babelJest = require('babel-jest')
    .createTransformer({
    presets: [],
    plugins: ['transform-es2015-modules-commonjs']
});
function process(src, path, config, transformOptions) {
    var root = require('jest-util').getPackageRoot();
    var compilerOptions = utils_1.getTSConfig(config.globals, config.collectCoverage);
    var isTsFile = path.endsWith('.ts') || path.endsWith('.tsx');
    var isJsFile = path.endsWith('.js') || path.endsWith('.jsx');
    var isHtmlFile = path.endsWith('.html');
    if (isHtmlFile && config.globals.__TRANSFORM_HTML__) {
        src = 'module.exports=`' + src + '`;';
    }
    var processFile = compilerOptions.allowJs === true
        ? isTsFile || isJsFile
        : isTsFile;
    if (processFile) {
        var tsTranspiled = tsc.transpileModule(src, {
            compilerOptions: compilerOptions,
            fileName: path
        });
        var outputText = compilerOptions.allowSyntheticDefaultImports
            ? babelJest.process(tsTranspiled.outputText, path + '.js', config, transformOptions)
            : tsTranspiled.outputText;
        path = path.startsWith(root) ? path.substr(root.length) : path;
        if (!config.testRegex || !path.match(config.testRegex)) {
            fs.outputFileSync(nodepath.join(config.cacheDirectory, '/ts-jest/', new Buffer(path).toString('base64')), outputText);
        }
        var start = outputText.length > 12 ? outputText.substr(1, 10) : '';
        var modified = start === 'use strict'
            ? "'use strict';require('ts-jest').install();" + outputText
            : "require('ts-jest').install();" + outputText;
        return modified;
    }
    return src;
}
exports.process = process;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlcHJvY2Vzc29yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3ByZXByb2Nlc3Nvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUErQjtBQUMvQixnQ0FBa0M7QUFDbEMsaUNBQXNDO0FBRXRDLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNqQyxJQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDakMsSUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQztLQUNwQyxpQkFBaUIsQ0FBQztJQUNmLE9BQU8sRUFBRSxFQUFFO0lBQ1gsT0FBTyxFQUFFLENBQUMsbUNBQW1DLENBQUM7Q0FDakQsQ0FBQyxDQUFDO0FBRUwsaUJBQXdCLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLGdCQUFnQjtJQUN2RCxJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDbkQsSUFBTSxlQUFlLEdBQUcsbUJBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUU1RSxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0QsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQy9ELElBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFMUMsRUFBRSxDQUFDLENBQUMsVUFBVSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1FBQ2xELEdBQUcsR0FBRyxrQkFBa0IsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO0lBQzFDLENBQUM7SUFFRCxJQUFNLFdBQVcsR0FBRyxlQUFlLENBQUMsT0FBTyxLQUFLLElBQUk7VUFDOUMsUUFBUSxJQUFJLFFBQVE7VUFDcEIsUUFBUSxDQUFDO0lBRWYsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUNkLElBQU0sWUFBWSxHQUFHLEdBQUcsQ0FBQyxlQUFlLENBQ3BDLEdBQUcsRUFDSDtZQUNJLGVBQWUsRUFBRSxlQUFlO1lBQ2hDLFFBQVEsRUFBRSxJQUFJO1NBQ2pCLENBQ0osQ0FBQztRQUVGLElBQU0sVUFBVSxHQUFHLGVBQWUsQ0FBQyw0QkFBNEI7Y0FDekQsU0FBUyxDQUFDLE9BQU8sQ0FDYixZQUFZLENBQUMsVUFBVSxFQUN2QixJQUFJLEdBQUcsS0FBSyxFQUNaLE1BQU0sRUFDTixnQkFBZ0IsQ0FDbkI7Y0FDRCxZQUFZLENBQUMsVUFBVSxDQUFDO1FBTTlCLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQztRQUcvRCxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckQsRUFBRSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsV0FBVyxFQUFFLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQzFILENBQUM7UUFFRCxJQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsTUFBTSxHQUFHLEVBQUUsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFckUsSUFBTSxRQUFRLEdBQUcsS0FBSyxLQUFLLFlBQVk7Y0FDakMsK0NBQTZDLFVBQVk7Y0FDekQsa0NBQWdDLFVBQVksQ0FBQztRQUVuRCxNQUFNLENBQUMsUUFBUSxDQUFDO0lBRXBCLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBRyxDQUFDO0FBQ2YsQ0FBQztBQXhERCwwQkF3REMifQ==